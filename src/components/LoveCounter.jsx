import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Heart, Calendar, Clock, Sparkles, Star, Gift, Coffee } from 'lucide-react';
import './LoveCounter.css';

const LoveCounter = () => {
  const [time, setTime] = useState({
    days: 0,
    hours: 0,
    minutes: 0,
    seconds: 0
  });

  // Ng√†y b·∫Øt ƒë·∫ßu y√™u (c√≥ th·ªÉ thay ƒë·ªïi)
  const loveStartDate = new Date('2024-12-16T00:00:00');

  useEffect(() => {
    const timer = setInterval(() => {
      const now = new Date();
      const difference = now - loveStartDate;

      const days = Math.floor(difference / (1000 * 60 * 60 * 24));
      const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((difference % (1000 * 60)) / 1000);

      setTime({ days, hours, minutes, seconds });
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  const timeUnits = [
    { label: 'Ng√†y', value: time.days, icon: Calendar },
    { label: 'Gi·ªù', value: time.hours, icon: Clock },
    { label: 'Ph√∫t', value: time.minutes, icon: Clock },
    { label: 'Gi√¢y', value: time.seconds, icon: Clock }
  ];

  const memorableMoments = [
    {
      icon: Star,
      title: 'L·∫ßn ƒë·∫ßu g·∫∑p nhau',
      description: 'Kho·∫£nh kh·∫Øc ƒë·ªãnh m·ªánh khi √°nh m·∫Øt ch√∫ng ta g·∫∑p nhau',
      date: '16/12/2024'
    },
    {
      icon: Coffee,
      title: 'Bu·ªïi h·∫πn ƒë·∫ßu ti√™n',
      description: 'Nh·ªØng c√¢u chuy·ªán v√† ti·∫øng c∆∞·ªùi ƒë·∫ßu ti√™n',
      date: '20/12/2024'
    },
    {
      icon: Gift,
      title: 'M√≥n qu√† ƒë·∫ßu ti√™n',
      description: 'Nh·ªØng m√≥n qu√† nh·ªè nh∆∞ng ch·ª©a ƒë·ª±ng t√¨nh y√™u l·ªõn',
      date: '25/12/2024'
    }
  ];

  return (
    <motion.div 
      className="love-counter"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className="counter-header">
        <motion.div 
          className="heart-container"
          animate={{ 
            scale: [1, 1.1, 1],
            rotate: [0, 5, -5, 0]
          }}
          transition={{ 
            duration: 2,
            repeat: Infinity,
            ease: "easeInOut"
          }}
        >
          <Heart className="big-heart" />
        </motion.div>
        
        <motion.h1 
          className="counter-title"
          initial={{ scale: 0.8 }}
          animate={{ scale: 1 }}
          transition={{ duration: 0.6 }}
        >
          Ch√∫ng ta ƒë√£ y√™u nhau
        </motion.h1>
        <motion.p 
          className="counter-subtitle"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.3 }}
        >
          T·ª´ ng√†y {loveStartDate.toLocaleDateString('vi-VN')}
        </motion.p>
      </div>

      <div className="counter-grid">
        {timeUnits.map((unit, index) => {
          const IconComponent = unit.icon;
          return (
            <motion.div 
              key={index}
              className="time-unit"
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
              whileHover={{ scale: 1.05, y: -5 }}
            >
              <div className="time-value">
                <motion.span
                  key={unit.value}
                  initial={{ scale: 1.2, color: "#ec4899" }}
                  animate={{ scale: 1, color: "#be185d" }}
                  transition={{ duration: 0.3 }}
                >
                  {unit.value.toString().padStart(2, '0')}
                </motion.span>
              </div>
              <div className="time-label">
                <IconComponent className="time-icon" />
                <span>{unit.label}</span>
              </div>
            </motion.div>
          );
        })}
      </div>

      <div className="love-message">
        <motion.div 
          className="message-container"
          whileHover={{ scale: 1.02 }}
          transition={{ type: "spring", stiffness: 300 }}
        >
          <Sparkles className="message-icon" />
          <p>
            "M·ªói gi√¢y ph√∫t b√™n em l√† m·ªôt m√≥n qu√† qu√Ω gi√° nh·∫•t m√† anh c√≥ ƒë∆∞·ª£c. 
            Th·ªùi gian tr√¥i qua nh∆∞ng t√¨nh y√™u c·ªßa anh d√†nh cho em s·∫Ω m√£i m√£i kh√¥ng ƒë·ªïi thay."
          </p>
        </motion.div>
      </div>

      <div className="memorable-moments-section">
        <motion.h2 
          className="section-title"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.4 }}
        >
          Nh·ªØng kho·∫£nh kh·∫Øc ƒë√°ng nh·ªõ üí´
        </motion.h2>
        <div className="memorable-moments">
          {memorableMoments.map((moment, index) => {
            const IconComponent = moment.icon;
            return (
              <motion.div 
                key={index}
                className="memorable-moment"
                whileHover={{ scale: 1.05, y: -5 }}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.6 + index * 0.1 }}
              >
                <div className="moment-icon">
                  <IconComponent className="moment-icon-svg" />
                </div>
                <div className="moment-content">
                  <h3 className="moment-title">{moment.title}</h3>
                  <p className="moment-description">{moment.description}</p>
                  <span className="moment-date">{moment.date}</span>
                </div>
              </motion.div>
            );
          })}
        </div>
      </div>
    </motion.div>
  );
};

export default LoveCounter;