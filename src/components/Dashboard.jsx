import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Heart, Calendar, Image, MessageSquare, Music, Star, Sparkles, Clock, Gift, Coffee, Moon, Sun, MapPin } from 'lucide-react';
import './Dashboard.css';

const Dashboard = ({ onNavigate }) => {
  const [currentTime, setCurrentTime] = useState(new Date());
  const [currentQuote, setCurrentQuote] = useState(0);
  const [lovePercentage, setLovePercentage] = useState(0);

  const loveDate = new Date('2024-12-16');
  const today = new Date();
  const daysInLove = Math.floor((today - loveDate) / (1000 * 60 * 60 * 24));
  const hoursInLove = Math.floor((today - loveDate) / (1000 * 60 * 60));
  const minutesInLove = Math.floor((today - loveDate) / (1000 * 60));

  // Love quotes rotation
  const loveQuotes = [
    {
      text: "T√¨nh y√™u kh√¥ng ph·∫£i l√† t√¨m ki·∫øm m·ªôt ng∆∞·ªùi ho√†n h·∫£o, m√† l√† h·ªçc c√°ch nh√¨n m·ªôt ng∆∞·ªùi kh√¥ng ho√†n h·∫£o m·ªôt c√°ch ho√†n h·∫£o. Em ch√≠nh l√† s·ª± ho√†n h·∫£o trong m·∫Øt anh!",
      author: "Kh√°nh ‚ù§Ô∏è Minh"
    },
    {
      text: "Trong v√¥ v√†n nh·ªØng ng√¥i sao tr√™n b·∫ßu tr·ªùi, anh ch·ªâ c·∫ßn m·ªôt ng√¥i sao duy nh·∫•t - ƒë√≥ ch√≠nh l√† em, ng∆∞·ªùi th·∫Øp s√°ng c·∫£ th·∫ø gi·ªõi c·ªßa anh.",
      author: "T√¨nh y√™u vƒ©nh c·ª≠u"
    },
    {
      text: "M·ªói ng√†y b√™n em l√† m·ªôt m√≥n qu√†, m·ªói gi√¢y ph√∫t v·ªõi em l√† m·ªôt ph√©p m√†u. Anh y√™u em kh√¥ng ch·ªâ v√¨ em l√† ai, m√† v√¨ anh tr·ªü th√†nh ai khi ·ªü b√™n em.",
      author: "T·ª´ tr√°i tim anh"
    },
    {
      text: "N·∫øu t√¨nh y√™u l√† m·ªôt b√†i h√°t, th√¨ em ch√≠nh l√† giai ƒëi·ªáu ƒë·∫πp nh·∫•t. N·∫øu t√¨nh y√™u l√† m·ªôt c√¢u chuy·ªán, th√¨ em l√† happy ending m√† anh lu√¥n mong ƒë·ª£i.",
      author: "L·ªùi y√™u th∆∞∆°ng"
    }
  ];

  const stats = [
    { 
      icon: Calendar, 
      label: 'Ng√†y y√™u nhau', 
      value: `${daysInLove}`, 
      unit: 'ng√†y',
      color: '#ec4899',
      description: 'K·ªÉ t·ª´ ng√†y ƒë·∫ßu ti√™n'
    },
    { 
      icon: Clock, 
      label: 'Gi·ªù b√™n nhau', 
      value: `${hoursInLove.toLocaleString()}`, 
      unit: 'gi·ªù',
      color: '#f472b6',
      description: 'Th·ªùi gian qu√Ω b√°u'
    },
    { 
      icon: Heart, 
      label: 'T√¨nh y√™u', 
      value: `${lovePercentage}`, 
      unit: '%',
      color: '#be185d',
      description: 'V√† v·∫´n ƒëang tƒÉng'
    },
    { 
      icon: Star, 
      label: 'K·ª∑ ni·ªám ƒë·∫πp', 
      value: '‚àû', 
      unit: 'memories',
      color: '#db2777',
      description: 'Kh√¥ng th·ªÉ ƒë·∫øm ƒë∆∞·ª£c'
    }
  ];

  const quickActions = [
    {
      icon: Calendar,
      title: 'ƒê·∫øm ng√†y y√™u',
      description: 'Xem ch√∫ng ta ƒë√£ y√™u nhau bao l√¢u r·ªìi',
      gradient: 'from-pink-400 to-rose-400',
      emoji: 'üìÖ',
      page: 'love-counter'
    },
    {
      icon: Image,
      title: 'Album ·∫£nh',
      description: 'Nh·ªØng kho·∫£nh kh·∫Øc ƒë·∫πp nh·∫•t c·ªßa ch√∫ng ta',
      gradient: 'from-purple-400 to-pink-400',
      emoji: 'üì∏',
      page: 'photo-album'
    },
    {
      icon: MessageSquare,
      title: 'Th∆∞ t√¨nh',
      description: 'Nh·ªØng l·ªùi y√™u th∆∞∆°ng t·ª´ tr√°i tim anh',
      gradient: 'from-rose-400 to-pink-400',
      emoji: 'üíå',
      page: 'love-letter'
    },
    {
      icon: Music,
      title: '√Çm nh·∫°c',
      description: 'Playlist t√¨nh y√™u d√†nh ri√™ng cho em',
      gradient: 'from-pink-400 to-purple-400',
      emoji: 'üéµ',
      page: 'music-player'
    }
  ];

  // Update time every second
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  // Rotate quotes every 8 seconds
  useEffect(() => {
    const quoteTimer = setInterval(() => {
      setCurrentQuote(prev => (prev + 1) % loveQuotes.length);
    }, 8000);

    return () => clearInterval(quoteTimer);
  }, []);

  // Animate love percentage
  useEffect(() => {
    const timer = setInterval(() => {
      setLovePercentage(prev => {
        if (prev < 100) return prev + 1;
        return 100;
      });
    }, 50);

    return () => clearInterval(timer);
  }, []);

  const getGreeting = () => {
    const hour = currentTime.getHours();
    if (hour < 12) return { text: 'Ch√†o bu·ªïi s√°ng', icon: Sun, emoji: 'üåÖ' };
    if (hour < 18) return { text: 'Ch√†o bu·ªïi chi·ªÅu', icon: Sun, emoji: '‚òÄÔ∏è' };
    return { text: 'Ch√†o bu·ªïi t·ªëi', icon: Moon, emoji: 'üåô' };
  };

  const greeting = getGreeting();
  const GreetingIcon = greeting.icon;

  const handleActionClick = (page) => {
    if (onNavigate) {
      onNavigate(page);
    }
  };

  return (
    <motion.div 
      className="dashboard"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.6 }}
    >
      {/* Header v·ªõi greeting ƒë·ªông */}
      <div className="dashboard-header">
        <motion.div
          className="greeting-container"
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.8 }}
        >
          <div className="greeting-time">
            <GreetingIcon className="greeting-icon" />
            <span>{greeting.text} {greeting.emoji}</span>
            <span className="current-time">
              {currentTime.toLocaleTimeString('vi-VN', { 
                hour: '2-digit', 
                minute: '2-digit',
                second: '2-digit'
              })}
            </span>
          </div>
        </motion.div>

        <motion.h1 
          className="dashboard-title"
          initial={{ scale: 0.8, y: 20 }}
          animate={{ scale: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.2 }}
        >
          Ch√†o m·ª´ng v·ªÅ nh√†, Minh y√™u! üíï
        </motion.h1>
        
        <motion.p 
          className="dashboard-subtitle"
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.4 }}
        >
          N∆°i l∆∞u gi·ªØ nh·ªØng k·ª∑ ni·ªám ƒë·∫πp nh·∫•t c·ªßa ch√∫ng ta ‚ú®
        </motion.p>
      </div>

      {/* Love Quote v·ªõi animation */}
      <div className="love-quote">
        <AnimatePresence mode="wait">
          <motion.div 
            key={currentQuote}
            className="quote-container"
            initial={{ opacity: 0, scale: 0.9, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.9, y: -20 }}
            transition={{ duration: 0.6 }}
            whileHover={{ scale: 1.02 }}
          >
            <div className="quote-header">
              <Heart className="quote-icon" />
              <div className="quote-indicators">
                {loveQuotes.map((_, index) => (
                  <div 
                    key={index}
                    className={`quote-dot ${index === currentQuote ? 'active' : ''}`}
                  />
                ))}
              </div>
            </div>
            <p className="quote-text">{loveQuotes[currentQuote].text}</p>
            <span className="quote-author">‚Äî {loveQuotes[currentQuote].author}</span>
          </motion.div>
        </AnimatePresence>
      </div>

      {/* Stats Grid v·ªõi animations ƒë·∫πp */}
      <div className="stats-grid">
        {stats.map((stat, index) => {
          const IconComponent = stat.icon;
          return (
            <motion.div 
              key={index}
              className="stat-card"
              initial={{ opacity: 0, y: 40, scale: 0.9 }}
              animate={{ opacity: 1, y: 0, scale: 1 }}
              transition={{ 
                duration: 0.6, 
                delay: index * 0.1 + 0.6,
                type: "spring",
                stiffness: 100
              }}
              whileHover={{ 
                y: -8, 
                scale: 1.02,
                transition: { duration: 0.2 }
              }}
            >
              <div className="stat-icon-container">
                <motion.div
                  animate={{ 
                    scale: [1, 1.1, 1],
                    rotate: [0, 5, -5, 0]
                  }}
                  transition={{ 
                    duration: 3,
                    repeat: Infinity,
                    delay: index * 0.5
                  }}
                >
                  <IconComponent 
                    className="stat-icon" 
                    style={{ color: stat.color }}
                  />
                </motion.div>
                <div className="stat-glow" style={{ backgroundColor: stat.color + '20' }} />
              </div>
              
              <div className="stat-content">
                <div className="stat-value-container">
                  <motion.h3 
                    className="stat-value"
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    transition={{ 
                      duration: 0.5, 
                      delay: index * 0.1 + 1,
                      type: "spring"
                    }}
                  >
                    {stat.value}
                  </motion.h3>
                  <span className="stat-unit">{stat.unit}</span>
                </div>
                <p className="stat-label">{stat.label}</p>
                <span className="stat-description">{stat.description}</span>
              </div>
            </motion.div>
          );
        })}
      </div>

      {/* Quick Actions */}
      <div className="quick-actions">
        <motion.h2 
          className="section-title"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 1.2 }}
        >
          <Sparkles className="section-icon" />
          Kh√°m ph√° th·∫ø gi·ªõi t√¨nh y√™u c·ªßa ch√∫ng ta üíñ
        </motion.h2>
        
        <div className="actions-grid">
          {quickActions.map((action, index) => {
            const IconComponent = action.icon;
            return (
              <motion.div 
                key={index}
                className="action-card"
                initial={{ opacity: 0, y: 40 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ 
                  duration: 0.6, 
                  delay: 1.4 + index * 0.1,
                  type: "spring",
                  stiffness: 100
                }}
                whileHover={{ 
                  y: -10, 
                  scale: 1.02,
                  transition: { duration: 0.2 }
                }}
                whileTap={{ scale: 0.98 }}
                onClick={() => handleActionClick(action.page)}
                style={{ cursor: 'pointer' }}
              >
                <div className="action-header">
                  <div className="action-emoji">{action.emoji}</div>
                  <motion.div
                    className="action-icon-container"
                    animate={{ 
                      rotate: [0, 10, -10, 0],
                    }}
                    transition={{ 
                      duration: 4,
                      repeat: Infinity,
                      delay: index * 0.5
                    }}
                  >
                    <IconComponent className="action-icon" />
                  </motion.div>
                </div>
                
                <div className="action-content">
                  <h3>{action.title}</h3>
                  <p>{action.description}</p>
                </div>
                
                <div className="action-hover-effect">
                  <span>Kh√°m ph√° ngay ‚Üí</span>
                </div>
              </motion.div>
            );
          })}
        </div>
      </div>

      {/* Love Counter Live */}
      <motion.div 
        className="live-counter"
        initial={{ opacity: 0, y: 30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 2.0 }}
      >
        <div className="counter-header">
          <Heart className="counter-icon" />
          <h3>T√¨nh y√™u ƒëang ƒë·∫øm t·ª´ng gi√¢y...</h3>
        </div>
        <div className="counter-display">
          <div className="counter-item">
            <span className="counter-value">{minutesInLove.toLocaleString()}</span>
            <span className="counter-label">ph√∫t</span>
          </div>
          <div className="counter-separator">üíï</div>
          <div className="counter-item">
            <span className="counter-value">{Math.floor(minutesInLove * 60).toLocaleString()}</span>
            <span className="counter-label">gi√¢y</span>
          </div>
        </div>
        <p className="counter-message">
          M·ªói gi√¢y tr√¥i qua l√† m·ªôt gi√¢y anh y√™u em nhi·ªÅu h∆°n! üíñ
        </p>
      </motion.div>
    </motion.div>
  );
};

export default Dashboard;